---
title: Customizing Synthea Data
area:
  name: Advanced Topics
topic:
  name: Custom Synthea Data & FHIR Testing Servers

roles:
  - Investigator
  - Informaticist
  - Software Engineer
  - Clinician Scientist/Trainee

learning_objectives:
  - question: What options are available for customizing Synthea to my use case?
    answer: There are a number of options, including modifying the modules, creating new modules, filtering data with a Keep Module, applying module overrides, making arbitrary modifications with the Flexporter, and finally writing custom scripts in other languages.
---

While data generated by Synthea may be valuable for a number of different use cases, out of the box it may not address everyone's. If your needs are completely different from what Synthea offers then it might not be the best option, but if the data is close and just needs a *little bit* more, there are multiple approaches to customizing it. The best approach will depend on the specifics of your use case.

This page describes a few of the options available for customizing output from Synthea. No Java programming experience required.


## Creating and Editing Modules
Note: modifying the modules requires the Developer setup as described in `(link to previous page)`

For the most detailed and up-to-date guidance on creating and editing modules, see [the Generic Module Framework section on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Generic-Module-Framework).

While the module JSONs can technically be written by hand, we strongly recommend using [the Module Builder](https://synthetichealth.github.io/module-builder/) to edit modules graphically.

### Creating a New Module
In the Module Builder, click the "New Module" button in the upper left. This will open a new tab in the builder with the simplest possible module: an Initial state that transitions directly to a Terminal state.

[IMAGE]


To add new states to the module, click the "+ Add State" button in the upper right of the editor. This will do slightly different things based on what is currently selected in the module graph:

 -  If nothing is selected, the new state will be added off to the side, it's up to you to connect other states to it, and it to other states by editing the transitions.
 -  If a state is selected, the new state will be added "at the end" of the selected state. The selected state will now transition directly to the new state, and the new state will have the original transition from the selected state.
 - If a transition arrow is selected, the new state will be added "inside" the transition. The transition will now point to the new state, and the new state will transition directly to the original target of the transition.

You can change the state name, type, transition, and other properties of the state via the sidebar.



### Editing an Existing Module

To load an existing module for editing, first click the "Open Module" button at the top of the Module Builder. From the load module screen there are a few options:

 -  The "Core Modules" and "Submodules" are a good first step for exploring the various modules available.
 -  The "GitHub modules" tab loads modules directly from various branches on the core Synthea repository on GitHub
 -  You can also drag & drop a module JSON file onto the modal, or paste the JSON content of the file into the "Paste JSON" tab
 -  The "Local Storage" and "My Modules" tabs will be empty initially, but as you use the module builder these may be populated with modules you edit.






### Loading Modules Into Synthea

Modules in Synthea are stored in the `src/main/resources/modules` folder under the base `synthea` directory. Submodules are stored in further subfolders under this. If your new or modified module is a top-level module and is expected to run for all patients starting at birth, make sure it is in the `src/main/resources/modules` folder. If you are modifying an existing module, make sure the name is exactly the same (in terms of capitalization, spaces vs underscores, etc) and you completely replace the file in its original location.

Once your module has been loaded, no special command line flags are necessary. Simply re-run Synthea with your desired configuration and it should pick up the new module immediately.

### Common Issues / Frequently Asked Questions

 - I created a module with just a Condition/Observation/Procedure but it's not showing up in records. Why not?
    - Most likely the issue is that the state is being processed and the record entry is added immediately at birth, but then filtered out at export time. By default Synthea only keeps the last 10 years of history when a patient is exported. This setting is driven by the configuration item `exporter.years_of_history`. This setting can be changed either on the command line with flag `--exporter.years_of_history=N` or if using the developer setup, in the configuration file at `src/main/resources/synthea.properties`. We recommend setting this option to `0`, meaning "keep all history", while creating and debugging a new module. 

 - Why isn't Synthea processing my module?
    - First, make sure it's not the same issue as the previous question where it is being processed but the record entries are filtered out. Next, make sure the module is actually being loaded - watch the list of modules being loaded at startup and confirm your new module is in that list. It may be useful to temporarily remove other modules to speed up the process.

If your module still doesn't work as expected, please feel free to post a [discussion item on the Synthea GitHub](https://github.com/synthetichealth/synthea/discussions) to request assistance. Make sure to include as much information as possible, including the module and any errors you are seeing.


## Keep Modules
It is common in many use cases that only records with specific attributes are relevant, for example, maybe you only want records containing a certain diagnosed Condition. There are a few approaches that can be taken here:  

1.  Post-process the data with another tool such as a Python script, to examine a set of exported records and filter out those that don't meet your defined criteria. (Note that if the condition of interest is rare, it may take a lot of time and resources to generate sufficient records)  
2.  Modify the module for your condition of interest, to ensure all patients get the condition. (Note this may be trivial in some instances, but in others the relationships between modules can be complex, or the item of interest may be set within the Java engine.)
3.  Use a Keep Module. A Keep Module is a module similar to a disease module, that defines criteria for whether a record should be kept or discarded. The biggest advantage of a Keep Module is that all patients exported will have the desired criteria, and it will generate the requested number of patients. (That is, assuming the criteria are possible to meet.)

::: callout-warning

It is critical that the Keep Module represent logic that it is possible for a Synthea record to actually meet. For instance, the Diabetes module will never onset diabetes in a patient earlier than age 18, so a Keep Module for "keep patients under 18 with Diabetes" will not work.

Synthea does not have the ability to recognize when a Keep Module is impossible to satisfy. In these situations, to avoid running forever, the simulation will stop after a certain number of failed attempts to generate a record. If the situation is known to be possible but exceptionally rare, it is possible to increase the number of failed attempts before the simulation stops, with the config setting: `generate.max_attempts_to_keep_patient = 1000`
:::

The basic idea of a Keep Module is that it is a regular Synthea module, built with the Module Builder, with a specially named Terminal state "Keep". The module should use conditional transitions with logic such as "Active Condition" to determine whether to send patients to the Keep state or not. Patients that end the module in the Keep state will be exported, patients that end the module in any other state will be discarded and Synthea will restart a new patient with the same demographics but a different seed.

![](https://user-images.githubusercontent.com/13512036/116620440-d484ab00-a90f-11eb-97dc-bf8881e0bea6.png)

Construct a Keep Module using the Module Builder as usual (see instruction above in [Creating and Editing Modules](#creating-and-editing-modules) ), but do not save the .json file to the `src/main/resources/modules` folder. The easiest place to store it is in the base `synthea` folder. 

Finally to actually run Synthea with the Keep Module, use the `-k` flag with the path to the file:

```sh
run_synthea -k must_have_diabetes.json
```
Now patients exported to any output format will only be patients matching the defined criteria from the Keep Module.

Note that only one Keep Module may be used at a time, however the logic within it can be as complex as you need.

More information on Keep Modules is available [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Keep-Patients-Module).

## Other Areas
By default, Synthea is configured to run with the demographics and health care providers of the United States, but may be configured to run with other demographics such as other countries as well. A set of demographics files and other geographical information is available for many countries at [the synthea-international repository](https://github.com/synthetichealth/synthea-international). 


## Module Overrides
Module Overrides allow you to set specific values in a module, such as transition probabilities, without having to edit and replace the entire module. This makes it suitable for use with the "Basic setup"/JAR file version of Synthea.

Module overrides are defined using a Java properties file, where each key is the path to a specific field within a module, and the value is the new value to set for that field.

```
(module file path)::(jsonpath to value) = (new value)
```

For instance, to change the prevalence of Appendicitis among males from the default 8.6% to 100% (imagine an example use case of "a population of all patients who have had an appendectomy"), you could use an override file containing the following line:

```
appendicitis.json\:\:$['states']['Male']['distributed_transition'][0]['distribution'] = 1.0
```

This corresponds to setting the highlighted transition on the Appendicitis module to 100%:
![](../images/module_override.png)

Then run Synthea as follows:

```sh
run_synthea --module_override=(path_to_properties_file)
```

If using the Developer setup of Synthea, you can generate a template of a module override file with the "overrides" gradle task, for instance:

```sh
gradlew overrides -PincludeModules=appendicitis.json
```

This creates an overrides file at `./output/overrides.properties` containing the following:
```
appendicitis.json\:\:$['states']['Male']['distributed_transition'][0]['distribution'] = 0.086
appendicitis.json\:\:$['states']['Male']['distributed_transition'][1]['distribution'] = 0.914
appendicitis.json\:\:$['states']['Female']['distributed_transition'][0]['distribution'] = 0.067
appendicitis.json\:\:$['states']['Female']['distributed_transition'][1]['distribution'] = 0.933
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][0]['distribution'] = 0.263
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][1]['distribution'] = 0.423
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][2]['distribution'] = 0.221
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][3]['distribution'] = 0.093
appendicitis.json\:\:$['states']['Appendicitis']['distributed_transition'][0]['distribution'] = 0.7
appendicitis.json\:\:$['states']['Appendicitis']['distributed_transition'][1]['distribution'] = 0.3
```

Any lines may be modified, or freely removed if the field value is not meant to change.

More detail on creating and using overrides files is available [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Module-Overrides).

## Flexporter
The Flexible Exporter, aka "Flexporter" is an experimental feature that allows for arbitrary customizations in Synthea.

More detail on using the Flexporter is available [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Flexporter)

## Free-form tools
Finally, if all else fails, other languages such as Python, JavaScript, or R allow you to write your own scripts and tools to filter and modify the data created by Synthea as you see fit. The ecosystem is too broad to get into detail here, but some libraries of note that may be helpful are:

 -  JavaScript
    -  [fhir-mapper: https://github.com/standardhealth/fhir-mapper](https://github.com/standardhealth/fhir-mapper)
 -  Python
    - []
 -  R
    - []