---
title: Customizing Synthea Data
area:
  name: Advanced Topics
topic:
  name: Custom Synthea Data & FHIR Testing Servers

roles:
  - Investigator
  - Informaticist
  - Software Engineer
  - Clinician Scientist/Trainee

learning_objectives:
  - question: What options are available for customizing Synthea to my use case?
    answer: .
---



While data generated by Synthea may be valuable for a number of different uses cases, out of the box it may not address everyone's. If your needs are completely different from what Synthea offers then it might not be the best option, but if the data is close and just needs a *little bit* more, there are multiple approaches to customizing it. The best approach will depend on the specifics of your use case.

This page describes a few of the options available for customizing output from Synthea. No Java programming experience required.


## Creating and Editing Modules
Note: modifying the modules requires the Developer setup as described in (previous page)



## Keep Modules
It is common in many use cases that only records with specific attributes are relevant, for example, maybe you only want records containing a certain diagnosed Condition. There are a few approaches that can be taken here:  

1.  Post-process the data with another tool such as a Python script, to examine a set of exported records and filter out those that don't meet your defined criteria. (Note that if the condition of interest is rare, it may take a lot of time and resources to generate sufficient records)  
2.  Modify the module for your condition of interest, to ensure all patients get the condition. (Note this may be trivial in some instances, but in others the relationships between modules can be complex, or the item of interest may be set within the Java engine.)
3.  Use a Keep Module. A Keep Module is a module similar to a disease module, that defines criteria for whether a record should be kept or discarded. The biggest advantage of a Keep Module is that all patients exported will have the desired criteria, and it will generate the requested number of patients. (That is, assuming the criteria are possible to meet.)

::: callout-warning

It is critical that the Keep Module represent logic that it is possible for a Synthea record to actually meet. For instance, the Diabetes module will never onset diabetes in a patient earlier than age 18, so a Keep Module for "keep patients under 18 with Diabetes" will not work.

Synthea does not have the ability to recognize when a Keep Module is impossible to satisfy. In these situations, to avoid running forever, the simulation will stop after a certain number of failed attempts to generate a record. If the situation is known to be possible but exceptionally rare, it is possible to increase the number of failed attempts before the simulation stops, with the config setting: `generate.max_attempts_to_keep_patient = 1000`
:::

The basic idea of a Keep Module is that it is a regular Synthea module, built with the Module Builder, with a specially named Terminal state "Keep". The module should use conditional transitions with logic such as "Active Condition" to determine whether to send patients to the Keep state or not. Patients that end the module in the Keep state will be exported, patients that end the module in any other state will be discarded and Synthea will restart a new patient with the same demographics but a different seed.

![](https://user-images.githubusercontent.com/13512036/116620440-d484ab00-a90f-11eb-97dc-bf8881e0bea6.png)


More information on Keep Modules is available [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Keep-Patients-Module).

## Other Areas
By default, Synthea is configured to run with the demographics and health care providers of the United States, but may be configured to run with other demographics such as other countries as well. A set of demographics files and other geographical information is available for many countries at [the synthea-international repository](https://github.com/synthetichealth/synthea-international). 


## Module Overrides
Module Overrides allow you to set specific values in a module, such as transition probabilities, without having to edit and replace the entire module. This makes it suitable for use with the "Basic setup"/JAR file version of Synthea.

Module overrides are defined using a Java properties file, where each key is the path to a specific field within a module, and the value is the new value to set for that field.

```
(module file path)::(jsonpath to value) = (new value)
```

For instance, to change the prevalence of Appendicitis among males from the default 8.6% to 100% (consider an example use case of "a population of all patients who have had an appendectomy"), you could use an override file containing the following line:

```
appendicitis.json\:\:$['states']['Male']['distributed_transition'][0]['distribution'] = 1.0
```

Then run Synthea as follows:

```sh
run_synthea --module_override=(path_to_properties_file)
```


If using the Developer setup of Synthea, you can generate a template of a module override file with the "overrides" gradle task, for instance:

```sh
gradlew overrides -PincludeModules=appendicitis.json
```

This creates an overrides file at `./output/overrides.properties` containing the following:
```
appendicitis.json\:\:$['states']['Male']['distributed_transition'][0]['distribution'] = 0.086
appendicitis.json\:\:$['states']['Male']['distributed_transition'][1]['distribution'] = 0.914
appendicitis.json\:\:$['states']['Female']['distributed_transition'][0]['distribution'] = 0.067
appendicitis.json\:\:$['states']['Female']['distributed_transition'][1]['distribution'] = 0.933
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][0]['distribution'] = 0.263
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][1]['distribution'] = 0.423
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][2]['distribution'] = 0.221
appendicitis.json\:\:$['states']['Pre_appendicitis']['distributed_transition'][3]['distribution'] = 0.093
appendicitis.json\:\:$['states']['Appendicitis']['distributed_transition'][0]['distribution'] = 0.7
appendicitis.json\:\:$['states']['Appendicitis']['distributed_transition'][1]['distribution'] = 0.3
```

Any lines may be modified, or freely removed if the field value is not meant to change.

More detail on creating and using overrides files is available [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Module-Overrides).

## Flexporter
The Flexible Exporter, aka "Flexporter" is an experimental feature that allows for arbitrary customizations in Synthea.

More detail on using the Flexporter is available [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Flexporter)

## Free-form tools
Finally, if all else fails, other languages such as Python, JavaScript, or R allow you to write your own scripts and tools to filter and modify the data created by Synthea as you see fit. The ecosystem is too broad to get into detail here, but some libraries of note that may be helpful are:

 -  JavaScript
   -  [fhir-mapper: https://github.com/standardhealth/fhir-mapper](https://github.com/standardhealth/fhir-mapper)
 -  Python

 -  R