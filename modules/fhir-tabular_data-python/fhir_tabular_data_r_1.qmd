---
title: "FHIR & Tabular Data Analysis: R 1"

area:
  name: 
topic:
  name: FHIR for Research
  
roles:
  - Software Engineer
  - Informaticist
  
learning_objectives:
  - question: What is the `fhircrackr` package for R?
    answer: `fhircrackr` is an R library that that helps query FHIR resources and convert them into tabular data frames.
  - question: How can you query FHIR data using `fhircrackr`?
    answer: `fhircrackr` follows a two-step process. The first step is to query the FHIR server by providing a base URL and specifying the type of Resource we want. The second step is to our response (which is in XML format) into a tabular data frame by pulling specific elements we want into columns via XPath.
---

Researchers interested in analyzing data from FHIR sources will likely need to convert the FHIR data from XML or JSON to a tabular format like a data frame.

While this process can be done manually, it is often easier to use the [`fhircrackr`](https://github.com/POLAR-fhiR/fhircrackr) package. This package simplifies querying data from FHIR servers and converting the response into data frames.

This module will act as the "Hello World" tutorial for how to get a bare minimum FHIR query. We will walk through the following steps:

-   Establish a connection to the client server

-   Format and submit a query to the server

-   Process response data from the FHIR server.

-   View the resulting data to confirm that we successfully pulled data from the remote server.

First, let's get our environment setup.

```{r}
library(fhircrackr)
```

## Step 1: Query the FHIR server

First let\'s connect to our FHIR server for data retrieval.

Generally speaking the pattern for a RESTful GET query appended to a URL will take the form of:

    VERB [url]/[Resource] {?parameter=[value]}

See <http://hl7.org/fhir/R4/http.html> for more details.

Let\'s attempt to do a sample load from our example FHIR server by requesting [Patient resources](https://www.hl7.org/fhir/patient.html) for the available patients.

In this case, we want to modify the general pattern with:

-   `[url] = https://api.logicahealth.org/researchonfhir/open/`

-   `[Resource] = Patient`

```{r}
fhir_server <- "https://api.logicahealth.org/FHIRResearchSynthea/open/"
request <- fhir_url(url = fhir_server, resource = "Patient")
patient_bundle <- fhir_search(request = request, max_bundles = 1, verbose = 1)
```

```{r}
patient_bundle
```

If the above request works, you should see a preview of the first few lines of XML representing the FHIR resources from `patient_bundle` above.

## Step 2: Convert response from server into a data frame

The `fhircrackr` library uses the `fhir_table_description()` function to translate the hierarchical XML resource returned by the FHIR server into a tabular format (i.e., a data frame) that works with typical analysis approaches in R.

This function creates a definition mapping parts of the XML representation of the resource onto columns in the data frame that will be generated. The XML elements are identified using [XPath](https://en.wikipedia.org/wiki/XPath), a query language for XML.

```{r}
table_desc_patient <- fhir_table_description(
    resource = "Patient",

    cols = c(
            id           = "id",
            given_name    = "name/given",
            family_name   = "name/family",
            gender        = "gender",
            birthday      = "birthDate",
            birthTime     = "extension[@url=\"http://hl7.org/fhir/StructureDefinition/patient-birthTime\"]/valueDateTime"
        )

)
```

Many of the XPath queries you will use wil be straight-forward, like `id` and `name/given`. In some cases, you may need to construct more complex queries like the one to extract `birthTime` from the `patient-birthTime` extension in the FHIR resource instance. You can use a tool like [this XPath tester](https://extendsclass.com/xpath-tester.html) to help generate XPaths. For more information on XPath, see [this guide](https://www.w3schools.com/xml/xpath_intro.asp).

Once the table description is created, we can create a data frame:

```{r}
df_patient <- fhir_crack(bundles = patient_bundle, design = table_desc_patient, verbose = 0)
```

```{r}
df_patient
```

You should see the name, gender, birthday and birth time for 50 patients.
