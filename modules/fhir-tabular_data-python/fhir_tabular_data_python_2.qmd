---
title: "FHIR & Tabular Data Analysis: Python 2"

area:
  name: 
topic:
  name: FHIR for Research
  
roles:
  - Software Engineer
  - Informaticist
  
learning_objectives:
  - question: How is JSON data converted into a tabular format?
    answer: JSON keys are converted into tabular columns and their corresponding values are converted into a row entry. If there are nested key-value objects or arrays, then prefixes can be added to a column title to reflect what parent keys it is related to.
  - question: How can a DataFrame be processed when querying from a FHIR server?
    answer: The `fhir_pyrate` library provides the `fhir_paths` parameter in the `steal_bundles_to_dataframe()` function that allows a user to specify what columms they want to keep and how to name them.
---

This exercise will build of the previous module, where we connected to a Logica FHIR server and made a simple query for a specific patient:

```{python}
from fhir_pyrate import Pirate

search = Pirate(
    auth=None,
    base_url="https://api.logicahealth.org/FHIRResearchSynthea/open/"
)

patient_all = search.steal_bundles_to_dataframe(  
    resource_type="Patient",
    request_params={
        "_id": "11149"
    },
)
patient_all
```

## A Closer Look at JSON -\> DataFrame Conversion

Before cleaning up our dataframe, it is worth understanding exactly how `fhir_pyrate` is converting JSON data into a tabular format. JSON data is organized like a regular JavaScript object, meaning it is a collection of key-value pairs. However, a given key-value pair could be another object as the value, or even an array of more objects. This means we can have nested objects inside of a single JSON file.

Tabular data is not able to store such nested object hierarchies, since it has a simple structure columns representing a single variable and rows representing a different entry. This means that each column will need to represent a single key-value pair - but what happens with a key-value pair has an array of key-value pairs nested in it? In this case, we will need to create multiple separate columns that somehow are still related to each other.

Let's use the FHIR query from above as an example. Below is the raw JSON from the query. For this example, lets focus on the `telecom` key - it has a value of an array, which contains three more key-value pairs (`system`, `value`, and `use`). In this case, converting this into tabular format would require three separate rows for `system`, `value`, and `use` that are all related to each other.

::: {.callout-caution .}

```{json}
{
  "resourceType": "Bundle",
  "id": "133c1f8c-bb6c-41f6-b49a-e21b24eb5a13",
  "meta": {
    "lastUpdated": "2023-04-12T15:03:02.650+00:00"
  },
  "type": "searchset",
  "total": 1,
  "link": [ {
    "relation": "self",
    "url": "https://api.logicahealth.org/FHIRResearchSynthea/open/Patient?_id=11149"
  } ],
  "entry": [ {
    "fullUrl": "https://api.logicahealth.org/FHIRResearchSynthea/open/Patient/11149",
    "resource": {
      "resourceType": "Patient",
      "id": "11149",
      "meta": {
        "versionId": "1",
        "lastUpdated": "2023-04-06T21:10:07.000+00:00",
        "source": "#G7sxNFO6ngY1BpWr"
      },
      "text": {
        "status": "generated",
        "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Generated by <a href=\"https://github.com/synthetichealth/synthea\">Synthea</a>.Version identifier: v2.4.0-404-ge7ce2295\n .   Person seed: 8026383961327351951  Population seed: 0</div>"
      },
      "extension": [ {
        "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-race",
        "extension": [ {
          "url": "ombCategory",
          "valueCoding": {
            "system": "urn:oid:2.16.840.1.113883.6.238",
            "code": "1002-5",
            "display": "American Indian or Alaska Native"
          }
        }, {
          "url": "text",
          "valueString": "American Indian or Alaska Native"
        } ]
      }, {
        "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity",
        "extension": [ {
          "url": "ombCategory",
          "valueCoding": {
            "system": "urn:oid:2.16.840.1.113883.6.238",
            "code": "2186-5",
            "display": "Not Hispanic or Latino"
          }
        }, {
          "url": "text",
          "valueString": "Not Hispanic or Latino"
        } ]
      }, {
        "url": "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName",
        "valueString": "Tia76 Fisher429"
      }, {
        "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex",
        "valueCode": "F"
      }, {
        "url": "http://hl7.org/fhir/StructureDefinition/patient-birthPlace",
        "valueAddress": {
          "city": "North Brookfield",
          "state": "Massachusetts",
          "country": "US"
        }
      }, {
        "url": "http://synthetichealth.github.io/synthea/disability-adjusted-life-years",
        "valueDecimal": 0.012998260499375002
      }, {
        "url": "http://synthetichealth.github.io/synthea/quality-adjusted-life-years",
        "valueDecimal": 30.987001739500624
      } ],
      "identifier": [ {
        "system": "https://github.com/synthetichealth/synthea",
        "value": "429ddae5-0ff8-41fc-ad45-cc7070b337aa"
      }, {
        "type": {
          "coding": [ {
            "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
            "code": "MR",
            "display": "Medical Record Number"
          } ],
          "text": "Medical Record Number"
        },
        "system": "http://hospital.smarthealthit.org",
        "value": "429ddae5-0ff8-41fc-ad45-cc7070b337aa"
      }, {
        "type": {
          "coding": [ {
            "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
            "code": "SS",
            "display": "Social Security Number"
          } ],
          "text": "Social Security Number"
        },
        "system": "http://hl7.org/fhir/sid/us-ssn",
        "value": "999-69-1055"
      }, {
        "type": {
          "coding": [ {
            "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
            "code": "DL",
            "display": "Driver's License"
          } ],
          "text": "Driver's License"
        },
        "system": "urn:oid:2.16.840.1.113883.4.3.25",
        "value": "S99938870"
      }, {
        "type": {
          "coding": [ {
            "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
            "code": "PPN",
            "display": "Passport Number"
          } ],
          "text": "Passport Number"
        },
        "system": "http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber",
        "value": "X3026388X"
      } ],
      "name": [ {
        "use": "official",
        "family": "Morissette863",
        "given": [ "Alvera113" ],
        "prefix": [ "Ms." ]
      } ],
      "telecom": [ {
        "system": "phone",
        "value": "555-741-5139",
        "use": "home"
      } ],
      "gender": "female",
      "birthDate": "1987-10-01",
      "address": [ {
        "extension": [ {
          "url": "http://hl7.org/fhir/StructureDefinition/geolocation",
          "extension": [ {
            "url": "latitude",
            "valueDecimal": 42.210674475434004
          }, {
            "url": "longitude",
            "valueDecimal": -72.56410526045124
          } ]
        } ],
        "line": [ "1071 Pacocha Arcade Suite 69" ],
        "city": "West Springfield",
        "state": "Massachusetts",
        "postalCode": "01089",
        "country": "US"
      } ],
      "maritalStatus": {
        "coding": [ {
          "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
          "code": "S",
          "display": "S"
        } ],
        "text": "S"
      },
      "multipleBirthBoolean": false,
      "communication": [ {
        "language": {
          "coding": [ {
            "system": "urn:ietf:bcp:47",
            "code": "en-US",
            "display": "English"
          } ],
          "text": "English"
        }
      } ]
    },
    "search": {
      "mode": "match"
    }
  } ]
}
```

:::

Let's take a closer look at the `patient_bundle` DataFrame we created from before. Below summarizes all columns created - notice how the `telecom` columns are stored. Each key-value pair has a `name` prefix in front, which represents the higher level object that each key-pair is associated with. If a column has multiple prefixes, that means that given key-value pair is more deeply nested and each parent key is being added as a prefix. Try comparing other JSON key-value pairs with their corresponding tabular column titles to better understand how the conversion is working.

You also may have noticed a number appearing after each prefix. These are related to situations (which are common in FHIR) where a key is paired with an array of multples instanes of the same key-value pairs, but each instance has different values. This is exemplified in the `identifer` key, which has multiple different instances of `system`, `value`, and a nested array of `system`, `code`, and `display`. We can't differentiate each of these instances simply by their key names (since they're all the same), so `fhir_pyrate` addresses this issue by simply listing the numerical order that a given instance of keys is in. For example, the `identifer` key has 5 different values for the nested `system` key. This is stored in tabular format as the following: `identifer_0_system`, `identifer_1_system`, `identifer_2_system`, `identifer_3_system`, `identifer_4_system`.

```{python}
patient_all.info()
```

## Processing Our DataFrame

The first step of processing a DataFrame from a FHIR query is to do an initial query for all variables and inspect the resulting dataframe. This will give us an idea of what our data looks like and what columns we actually want. We have completed this step with the previous code (that's why our `patient` variable was named `patient_all` - we pulled all variables).

After understanding what variables we actually want in our final DataFrame, our second step will be to perform a second query for the same bundle, but this include the `fhir_paths` parameter in the `steal_bundles_to_dataframe()` method to specify and rename wanted variables. Note that in oder to use this parameter, [firepath-py](https://github.com/beda-software/fhirpath-py) must be installed first.

The `fire_paths` parameter takes an array of the columns you want in your final DataFrame. We can either keep the same name as the original key, or rename it. Note that when referencing original column names, replace the underscores with periods.

Below we are creating a newly formatted DataFrame that only contains the patient ID, name, phone number, gender, and birth date.

```{python}
patient = search.steal_bundles_to_dataframe(  
    resource_type="Patient",
    request_params={
        "_id": "11149"
    },
    fhir_paths=[
        "id",
        ("name", "name.0.given.0"),           # instead of name_0_given_0
        ("phone_number", "telecom.0.value"),  # instead of telecom_0_value
        "gender",
        "birthDate"
    ]
)
patient
```
