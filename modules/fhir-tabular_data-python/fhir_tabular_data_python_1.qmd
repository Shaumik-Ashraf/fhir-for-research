---
title: "FHIR & Tabular Data Analysis: Python 1"

area:
  name: 
topic:
  name: FHIR for Research
  
roles:
  - Software Engineer
  - Informaticist
  
learning_objectives:
  - question: What is the FHIR-PYrate package for Python?
    answer: FHIR-PYrate is a Python library that provides a high-level API for querying FHIR servers and returning information as `pandas` DataFrames.
  - question: How can you connect to a FHIR server and query data using FHIR-PYrate?
    answer: Using the `Pirate` class, you can instantiate a FHIR `search` object and use the `steal_bundles_to_dataframe` method to query a FHIR server and automatically convert the response into a `pandas` DataFrame.
---

Researchers interested in analyzing data from FHIR sources will likely need to convert the FHIR data from XML or JSON to a tabular format like [pandas](https://pandas.pydata.org/) [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)s.

While this process can be done manually, it is often easier to use the [FHIR-PYrate](https://github.com/UMEssen/FHIR-PYrate) package. This package simplifies querying data from FHIR servers and converting the response into DataFrames.

This module will act as the "Hello World" tutorial for how to get a bare minimum FHIR query. First, let's get our environment setup.

```{python}
from fhir_pyrate import Pirate
import pandas as pd
pd.options.display.max_columns = None  # so we can display all columns
```

## Step 1: Instantiate the Pirate Class

The `Pirate` class will be the only class from `fhir_pyrates`'s API that we will be using. It gives us a 2-for-1 deal in that it can do the following:

1.  Query FHIR servers via an base URL endpoint
2.  Automatically convert the response object into a `pandas` DataFrame.

It is the norm in this library to create an instance object called `search` from the `Pirate` class, referencing the HL7 terminology of a [FHIR Search](https://build.fhir.org/search.html) for its query functionality. It can take multiple parameters, but this module will focus on the following two which are the bare minimum necessary for instantiation:

1.  `auth`: Authentication is beyond the scope of this module, so we can set this to `None`. For more information on `fhir_pyrate`'s authentication functionality, please read further [documentation for the Ahoy class](https://github.com/UMEssen/FHIR-PYrate/#ahoy).
2.  `base_url`: Where we provide the base FHIR server URL from which we will query data. In this case, we will be connecting to a [Logica](https://www.logicahealth.org/) server with FHIR data created from [Synthea](https://synthetichealth.github.io/synthea/).

```{python}
search = Pirate(
    auth=None,
    base_url="https://api.logicahealth.org/FHIRResearchSynthea/open/"
)
```

## Step 2: Query FHIR Data

Once instantiated, our `search` object has some useful methods that we can use. The only one we will focus on is the `steal_bundles_to_dataframe()` method which can

1.  Specify query parameters
2.  Work behind the scenes to return the data as a `pandas` DataFrame object

Since the goal of this module is to only show a high-level overview of how to query FHIR data in Python, we won't go into the details of search parameters. Below, we can see that a specific Patient is being queried and returned is a `pandas` DataFrame with their information.

```{python}
patient = search.steal_bundles_to_dataframe(  
    resource_type="Patient",
    request_params={
        "_id": "11149"
    },
)
patient
```

## Looking Ahead

In the next two modules, we will dive deeper into the `steal_bundles_to_dataframe()` function and learn the following:

1.  How to better customize our newly created DataFrame with the `fhir_paths` parameter
2.  How to specify FHIR searches with the `resource_type` and `request_params` parameters
