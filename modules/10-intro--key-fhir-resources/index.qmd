---
title: "Module: Key FHIR Resources"
author: "Shaumik Ashraf"
format: html
editor: visual
toc: true
---

# Outline

<div class="alert alert-danger">This section will be deleted - here for reference</div>

**Learning Objectives**

1. Learn of key healthcare resources such as Patient, Observation, and Bundle
2. Understand how FHIR defines resources with great granularity and flexibility
3. Understand how FHIR encapsulates metadata as resources

**Module Sections**

 - Overview of Core Elements
   + hl7.org/fhir screenshot
 - Patient
   + Table
   + Complex Types, HumanName example
   + Choice types, deceased[X] example
   + Codeable Concepts (brief)
   + Inherited Attributes
   + Examples
 - Observation
 - Reference
 - Bundle
 - More Major Resources
   + Condition
   + Procedure
   + Practitioner
   + Organization
   + Composition
   + Extension
 - Metadefining Resources
   + CapabilityStatement
   + StructureDefinition
   + OperationDefinition
 - Profiling of Elements (maybe brief - linked to other section - or moved under patient)

**Sources**

- <https://hl7.org/fhir/>
- <https://hl7.org/fhir/patient.html>
- <https://hl7.org/fhir/observation.html>
- <https://www.hl7.org/fhir/bundle.html>
- <https://www.hl7.org/fhir/references.html>
- <https://hl7.org/fhir/extensibility.html>
- <https://hl7.org/fhir/capabilitystatement.html>
- <https://hl7.org/fhir/structuredefinition.html>
- <https://build.fhir.org/operationdefinition.html>
- <https://hl7.org/fhir/profiling.html>
- <https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html>

---

## Learning Objectives
 - Learn of key healthcare resources such as Patient, Observation, and Bundle
 - Understand how FHIR defines resources with great granularity and flexibility
 - Understand how FHIR encapsulates metadata as resources

## 1. Overview of Core Elements

Recall that FHIR itself stands for _Fast Healthcare Interoperability **Resources**_. The FHIR Core v4.3.0 (also known as Revision 4B, or R4B) defines
140 resources[^1] that are the building blocks for healthcare interoperability. The [HL7 FHIR Website](https://hl7.org/fhir) gives
a well structured summary of the FHIR Core:

[^1]: <https://hl7.org/fhir/R4B/resourcelist.html>

![Classification levels for FHIR Core](images/fhir-index-delinked.png)

As shown above the FHIR Core is tiered into 5 levels. The lower levels define data types, encodings, and other
infrastructure required to implement FHIR. Progressively higher levels begin to encapsulate clinical information, with level 3 defining intuitive
resources such as `Patient` and level 5 representing clinical workflows or medical knowledge with the intended use of Clinical Decision Support.

A resource may be encoded in JSON, XML, or Turtle[^2] with processing done by any programming language or software tool. The FHIR standard
and resource specifications are for defining the semantics necessary to transfer clinical information. FHIR is granular enough to capture the
miniscule pieces of information, but also flexible enough to work with a variety of medical use cases and data collection pipelines already in place.
A Resource can also extend itself to encompase new discoveries, profile itself for more specific use cases, define metadata for powerful autoconfiguration,
and carry human-readible data for manual stewardship. These resources fully follow Object Oriented principles.[^3]

[^2]: <https://hl7.org/fhir/formats.html#wire>
[^3]: <https://en.wikipedia.org/wiki/Object-oriented_programming>

To understand how FHIR accomplishes this, let us examine the Patient resource.

## 2. Patient Resource

Here is a [summary table for Patient resource](https://hl7.org/fhir/patient):

![FHIR Patient Resource](images/fhir-r4b-patient-structure.png)

The table can be interpreted as follows:

 - **Name**: The attribute name.
 - **Flags**: Special markers that carry information required for implementers. For example, **`N`** means the resource is normative, which is the
highest degree of officiality in the FHIR standard. [See all flags here](https://hl7.org/fhir/formats.html#table).
 - **Card.**: The cardinality of the attribute in format `{minimum}..{maximum}`. For example, `0..*` implies zero to any possible number of values and `1..1`
implies exactly 1 required element.
 - **Type**: The primitive or complex data type, where a complex data type is another Resource. Note in the first row that `Patient` itself also has a type,
which gives inheritence of additional attributes we'll discuss [below](#inherited-attributes). [See all FHIR types here](https://hl7.org/fhir/datatypes.html).
 - **Description & Constraints**: A human-targeted explanation of the attribute, but may also contain key constraints that must be enforced by
implementors.

Once you gain familiarity with FHIR, reading the corresponding table will give all the information you need to utilize a resource. FHIR is also designed so that
drafting a standard automatically generates the table and additional documentation[^4]. If you can thoroughly understand the Patient resource, then
you can understand the majority of resources out there.

[^4]: <https://confluence.hl7.org/display/FHIR/IG+Publisher+Documentation#IGPublisherDocumentation-Summary>

### The First Complex Type - HumanName

Since complex types are just Resources and FHIR automatically documents resources by defining them, `HumanName` also has it's own [structure table](https://hl7.org/fhir/datatypes.html#HumanName):

![HumanName Resource](images/fhir-r4b-human_name-structure-delinked.png)

Here you can see the granularity of FHIR. `HumanName` is designed to capture any and all possible circumstances, from temporary pseudonyms to
case studies on Pieter van de Heuvel[^5]. At the same time it is also very flexible

[^5]: <https://confluence.hl7.org/display/FHIR/IG+Publisher+Documentation#IGPublisherDocumentation-Summary>

### A Choice Type Attribute - deceased[x]

Choice types are the FHIR specification for polymorphic attributes or union fields. For example `Patient` is defined such that
either `Patient.deceasedBoolean` or `Patient.deceasedDateTime` are provided but not both, and the former must have a boolean value
while the latter must have a datetime value. (Note: that `deceased[x]` is **only** used in documentation, and never in actual data).
In this way FHIR can capture the semantics that "a patient passed away" and provide interoperability between healthcare systems that
record the event as a boolean flag or a timestamp. 

In general choice type attributes are always the attribute name concatenated with its value type in [Camel Case](https://en.wikipedia.org/wiki/Camel_case).
It is possible for a single database to have records that switch between the selected type, and an application that can successfully fetch
a resource with choice types must be able to support all possible values. A choice type attribute can be implemented in any way and FHIR libraries
exist to take care of it, but a processing script or data pipeline should also account for any and all possible values.

[See more information on choice types here](https://hl7.org/fhir/formats.html#choice).

### A Codeable Concept - maritalStatus

`Patient.maritalStatus` is a [CodeableConcept](http://hl7.org/fhir/datatypes.html#CodeableConcept) which is very commonly used in FHIR. Codeable Concepts
are a complex type that can flexibly bind an attribute to a specific terminology, value set, or health informatics standard such as ICD codes. In this case the
attribute is bound to the [Marital Status Codes Value Set](http://hl7.org/fhir/valueset-marital-status.html). See our [Terminology module](/modules/10-intro--terminology-introduction/)
for how these work.

### Inherited Attributes

Recall in the first row of the Patient structure table, `Patient` itself was assigned to the type `DomainResource`. This means that `DomainResource`
is the parent of `Patient` and all its attributes (and constraints) are inherited. `DomainResource` is also the child of `Resource`, which is the base
of almost all Interoperability Resources. Below are the structure tables for [Resource](http://hl7.org/fhir/resource.html) and
[DomainResource](http://hl7.org/fhir/domainresource.html) respectively.

![Resource](images/fhir-resource-structure-delinked.png)

![DomainResource](images/fhir-domain_resource-structure-delinked.png)

In essence, all domain resources such as Patient or Condition will have an `id` attribute (a string, usually a [uuid](https://en.wikipedia.org/wiki/Universally_unique_identifier)
to uniquely refer to it, a `meta` attribute
to store metadata such as implementation guide conformance, `text` to store a human-targeted narrative, and `extension` to store additional data if needed.

### Example Patients

To summarize everything about the Patient resource into practice, here is a minimalistic Patient resource:

```
// TODO
```

In the real-world there would likely be an [implementation guide](#TODO) that requires more attributes for a specific use case. For example here is a
Patient resource from the [US Core Data for Interoperability (USDCI)](https://build.fhir.org/ig/HL7/US-Core/index.html):

```
// TODO
```

This example should give you a full idea of what a FHIR Patient resource is and how it contains healthcare data. If you need more examples you can try the
[FHIR Core Patient examples](https://hl7.org/fhir/patient-examples.html) or [US Core Patient examples](https://build.fhir.org/ig/HL7/US-Core/StructureDefinition-us-core-patient-examples.html).
