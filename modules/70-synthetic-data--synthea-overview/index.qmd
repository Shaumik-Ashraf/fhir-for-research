---
title: Synthea Synthetic Data Overview
area:
  name: Advanced Topics
topic:
  name: Custom Synthea Data & FHIR Testing Servers

roles:
  - Investigator
  - Informaticist
  - Software Engineer
  - Clinician Scientist/Trainee

learning_objectives:
  - question: What is synthetic data?
    answer: Synthetic data is data that has been artificially generated ("synthesized") by a computer or person rather than collected from real events.
  - question: What is Synthea?
    answer: Synthea is a software tool that generates realistic but not real synthetic electronic health records.
  - question: How can I use Synthea to generate synthetic data?
    answer: Synthetic Synthea data can be downloaded as static datasets from https://synthea.mitre.org or generated locally by downloading and configuring the software from https://github.com/synthetichealth/synthea .

---


Accessing real healthcare data for research purposes is difficult for many reasons including:

- Data format and processing challenges
- Privacy regulations
- Required approvals from bodies like internal review boards (IRBs)

These factors and more limit what researchers can do with real healthcare data.


**Synthetic data** is an alternative to real healthcare data that avoids these challenges. Synthetic data is artifically generated, by computer or by hand, rather than collected from the real world. When using real healthcare data isn't feasible due to privacy, cost, or other restrictions, synthetic data is a good alternative.

::: callout-tip
## Synthetic data is not deidentified data

Researchers often use real healthcare data that have had personal identifiers removed. This includes:

- Deidentified data
- Anonymized data
- Pseudonymized data

Because this is real data, it is valuable for research. However, this data also carries the risk of re-identification.<!-- link to study about re-identifying deidentified data? footnote? seems like it needs some sort of verification. --LDC -->

In contrast, synthetic data is constructed so there is no privacy risk. When no individual's data was used to create a dataset, no individual's data can be in the dataset.
:::


## Synthea

**Syntheaâ„¢** is a synthetic data generator that models the life and medical history of synthetic patients. It creates realistic, but not real, synthetic electronic health records. The records are intended to be realistic at the individual level and population level.

Synthea is open source and built from publicly available information, so the resulting records are free of cost and free of privacy restrictions. 


[![](https://github.com/synthetichealth/synthea/raw/gh-pages/images/architecture.png){fig-alt="Basic Data Architecture of Synthea, showing how various sources of data are used to create a synthetic population"}](https://github.com/synthetichealth/synthea/wiki/Architecture)


Synthea starts with demographic information for a region based on the US Census. Using these demographics, Synthea randomly creates individuals with realistic race, sex, target age, etc., for the region. 

Synthea simulates each individual independently from birth until their death or the current day. As each individual lives out their synthetic life, they flow through **disease modules** that represent the progression and treatment of various diseases. Disease modules are built from publicly available incidence and prevalence statistics, along with care guidelines from medical institutions. No real person's data is ever used to create a Synthea module.

Once the simulation is complete, the patient record is exported into industry-standard formats such as FHIR (DSTU2, STU3, and/or R4)<!-- since R5 is out, do we want to give an "as of April 2023" disclaimer, and maybe note that R5 expected? --LDC -->, C-CDA, CSV, or plain text.

This page overviews key features of Synthea. If you'd like more information, visit the [Synthea wiki on GitHub](https://github.com/synthetichealth/synthea/wiki).


## Generic Modules

At Synthea's core is a set of disease modules, representing the progression and treatment of various conditions. Below is a small snippet of the Appendicitis module.

![](../images/synthea_example_module.png){fig-alt="A section of the Synthea Appendicitis module, demonstrating various state types and transitions available in Synthea modules"}

Disease modules are **state transition machines** where each individual flows through the modules based on logical conditions and weighted randomness. 

Every synthetic patient starts in each module's Initial state at birth and immediately begins progressing through the module's **states**. Each state represents a spot where something happens. Some examples are:

- **Delay states:** Wait a certain amount of time before progressing, commonly used to represent how the risk of certain conditions changes with age.
- **ConditionOnset states:** Represent the spot where the patient acquires a given condition, not necessarily where it was diagnosed.
- **Procedure states:** Represent the point in time in a healthcare encounter that a procedure was performed.

<!-- FIX: add link where they can see the list of all state types. --LDC -->

Each state has a **transition**, which points to the state the patient will progress to next:

- **Direct transitions:** Point to a single state.
- **Distributed transitions:** Point to multiple states, each with a weighted probability. A patient progresses to a randomly chosen state.
- **Conditional transitions:** Include logical rules showing which path to follow.
- **Complex transitions:** Are a combination of conditional and distributed transitions. 

Modules will run until either the simulation ends (at patient death or when it reaches the current date) or until the module reaches a Terminal state.[^1] 

[^1]: Terminal here means "the end of this module", not "the patient has a terminal condition and died". For instance, the Appendicitis module terminates after the patient has an appendectomy. Compare to the Sore Throat module which does not have a Terminal state since people are always at risk of common viral conditions that present as sore throat.
<!--NOTE to dylan: these footnotes get formatted much more nicely in the main branch --LDC -->

Combining these simple concepts allows module developers to build robust and detailed models of disease progression and treatment.

::: {.callout-caution collapse="true"}
## A note on Synthea clinical detail

Because Synthea is open source and accepts contributions from a global user base, the level of detail varies across modules. For instance, the Appendicitis module was the first to be created, and the level of detail is minimal. On the other hand, the COVID-19 module and submodules were designed to replicate the disease's progression as closely as possible, and is probably the largest and most detailed module. 

Further, the number of disease modules is limited. Early efforts focused on the "top ten" causes of premature death and reasons people see their primary care provider. Further additions have added a large number of modules representing common conditions, but rarer and more complex conditions may not be represented.

The Synthea community encourages and welcomes users to create new modules representing conditions of interest or to improve the detail and realism of existing modules.
:::


You can view, modify, and create Synthea modules with no programming experience using the [Synthea Module Builder](https://synthetichealth.github.io/module-builder/). For more information, read [[link to customizing modules module]]<!-- add module link here --LDC -->. There is also a [short video introduction to the Module Builder](https://www.youtube.com/watch?v=cOfI6FOKv0s), and a [tutorial on the Synthea Wiki](https://github.com/synthetichealth/synthea/wiki/Module-Builder-Tutorial).


## FHIR Resources

Synthea generates basic FHIR resources: it includes required fields but rarely populates optional fields. If you require fields that Synthea doesn't populate, you can customize Synthea to add those fields. Read [Customizing Synthea](<!-- add link --LDC -->) for more information.

By default, Synthea exports one file per patient, as a transaction-type Bundle<!-- FIX: rephrase. what is a transaction-type bundle? Is it this https://www.hl7.org/fhir/bundle.html? If so, link. And also mention what gets included in the bundle. All their observations, etc., within the bundle? --LDC -->. Synthea exports Organizations and Practitioners separately since these resources may be referenced by multiple patients' resources. Synthea may also be configured to export Bulk FHIR<!-- FIX: add link --LDC -->.

As of April 2023, Synthea produces the following resource types: 

-  `AllergyIntolerance`
-  `Bundle`
-  `CarePlan`
-  `Claim`
-  `Condition`
-  `Coverage` (R4 and STU3 only)
-  `DiagnosticReport` (for labs)
-  `Encounter`
-  `ExplanationOfBenefit` (R4 and STU3 only, Blue Button 2.0 Implementation Guide in STU3)
-  `Goal`
-  `ImagingStudy`
-  `Immunization` 
-  `MedicationRequest`
-  `MedicationAdministration`
-  `Observation`
-  `Organization`
-  `Patient`
-  `Practitioner`
-  `Procedure`

Resources only supported with R4 and US Core enabled<!--FIX: rephrase for clarity and make into a complete sentence. Also, the reader doesn't understand enabling r4 and us core - does this need to be in instructions somewhere that things need to be "enabled"? --LDC -->:  

-  `CareTeam`
-  `Device`
-  `DiagnosticReport` (for clinical notes)
-  `DocumentReference` (for clinical notes)
-  `Location`
-  `Medication`
-  `PractitionerRole`
-  `Provenance`

## Pre-generated Datasets
Instead of running Synthea yourself, you can use a pre-generated dataset. Pre-generated datasets are available at the following locations:

 -  <https://synthea.mitre.org/downloads>
    -  Centralized location for datasets created by the Synthea core development team
 -  <https://confluence.hl7.org/display/COD/mCODE+Test+Data>
    -  Sample cancer patients with data conformant to the [mCODE FHIR IG](http://hl7.org/fhir/us/mcode/)
 -  <https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/QDXLWR>
    - 10,000 synthetic Medicare patients spanning the entire United States

## Prerequisites

<!-- this section through the end feel like they should be in a separate module. Maybe "getting started with synthea" or similar. they don't feel like they belong in the intro module.

RE slack discussion on 4/21 w dylan - 
I think this section and the beginning of the customization section should be in a "running synthea" module. I'll put more notes in the customization section. --LDC -->
Synthea requires the Javaâ„¢ JDK 11 or newer to be installed (make sure to select the JDK, not the JRE install). We recommend the prebuilt OpenJDK binaries available from
<https://adoptium.net/>.

## Basic Setup
For users who just want to run Synthea, and not make detailed changes to the internal models, the basic setup is recommended. However, the number of customizations available in this setup is limited. See the Developer Setup instructions in the next module for instructions if you want to make changes to Synthea.

1. Download the binary distribution to a file from 
<https://github.com/synthetichealth/synthea/releases/download/master-branch-latest/synthea-with-dependencies.jar>
)

2. Open a command-line prompt/terminal window and run Synthea by running the command `java -jar synthea-with-dependencies.jar` . Additional command-line options may be appended at the end of the command, see [Common Configuration](#common-configuration) below for details.

When you run this command, you should see output similar to the following:

```
Scanned 60 modules and 36 submodules.
Loading submodule modules/breast_cancer/tnm_diagnosis.json
Loading submodule modules/allergies/allergy_incidence.json
Loading submodule modules/dermatitis/moderate_cd_obs.json
...
Loading module modules/opioid_addiction.json
Loading module modules/dialysis.json
...
Loading module modules/hypertension.json
Running with options:
Population: 1
Seed: 1570658792125
Provider Seed:1570658792125
Location: Massachusetts
Min Age: 0
Max Age: 140
1 -- Arthur650 Carroll471 (39 y/o M) Southwick, Massachusetts 
{alive=1, dead=0}
```

Once the process completes, you will see an `output` folder alongside the `synthea-with-dependencies.jar`, and a `fhir` folder inside the `output` folder. Inside that `fhir` folder are the FHIR Bundle JSON files that were produced by Synthea. Each Bundle will contain a single Patient resource as the first entry, followed by resources roughly ordered by time.


::: {.callout-note collapse="true"}
## A sample Patient resource
```json
{
  "resourceType": "Patient",
  "id": "2497ee24-c7c3-5d9a-3425-85da2e9e8b23",
  "meta": {
    "profile": [ "http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient" ]
  },
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Generated by <a href=\"https://github.com/synthetichealth/synthea\">Synthea</a>.Version identifier: v3.1.0-354-g3a6a93487\n .   Person seed: -2317076407365535282  Population seed: 123</div>"
  },
  "extension": [ {
    "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-race",
    "extension": [ {
      "url": "ombCategory",
      "valueCoding": {
        "system": "urn:oid:2.16.840.1.113883.6.238",
        "code": "2106-3",
        "display": "White"
      }
    }, {
      "url": "text",
      "valueString": "White"
    } ]
  }, {
    "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity",
    "extension": [ {
      "url": "ombCategory",
      "valueCoding": {
        "system": "urn:oid:2.16.840.1.113883.6.238",
        "code": "2186-5",
        "display": "Not Hispanic or Latino"
      }
    }, {
      "url": "text",
      "valueString": "Not Hispanic or Latino"
    } ]
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName",
    "valueString": "Nadine465 Wunsch504"
  }, {
    "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex",
    "valueCode": "M"
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/patient-birthPlace",
    "valueAddress": {
      "city": "Boston",
      "state": "Massachusetts",
      "country": "US"
    }
  }, {
    "url": "http://synthetichealth.github.io/synthea/disability-adjusted-life-years",
    "valueDecimal": 0.0
  }, {
    "url": "http://synthetichealth.github.io/synthea/quality-adjusted-life-years",
    "valueDecimal": 18.0
  } ],
  "identifier": [ {
    "system": "https://github.com/synthetichealth/synthea",
    "value": "2497ee24-c7c3-5d9a-3425-85da2e9e8b23"
  }, {
    "type": {
      "coding": [ {
        "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
        "code": "MR",
        "display": "Medical Record Number"
      } ],
      "text": "Medical Record Number"
    },
    "system": "http://hospital.smarthealthit.org",
    "value": "2497ee24-c7c3-5d9a-3425-85da2e9e8b23"
  }, {
    "type": {
      "coding": [ {
        "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
        "code": "SS",
        "display": "Social Security Number"
      } ],
      "text": "Social Security Number"
    },
    "system": "http://hl7.org/fhir/sid/us-ssn",
    "value": "999-32-6148"
  }, {
    "type": {
      "coding": [ {
        "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
        "code": "DL",
        "display": "Driver's license number"
      } ],
      "text": "Driver's license number"
    },
    "system": "urn:oid:2.16.840.1.113883.4.3.25",
    "value": "S99930905"
  } ],
  "name": [ {
    "use": "official",
    "family": "Stoltenberg489",
    "given": [ "Mitchell808" ],
    "prefix": [ "Mr." ]
  } ],
  "telecom": [ {
    "system": "phone",
    "value": "555-726-6485",
    "use": "home"
  } ],
  "gender": "male",
  "birthDate": "2004-05-11",
  "address": [ {
    "extension": [ {
      "url": "http://hl7.org/fhir/StructureDefinition/geolocation",
      "extension": [ {
        "url": "latitude",
        "valueDecimal": 42.40293333299843
      }, {
        "url": "longitude",
        "valueDecimal": -71.68746648659892
      } ]
    } ],
    "line": [ "352 Bailey Neck Apt 40" ],
    "city": "Clinton",
    "state": "MA",
    "postalCode": "01510",
    "country": "US"
  } ],
  "maritalStatus": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
      "code": "S",
      "display": "Never Married"
    } ],
    "text": "Never Married"
  },
  "multipleBirthBoolean": false,
  "communication": [ {
    "language": {
      "coding": [ {
        "system": "urn:ietf:bcp:47",
        "code": "en-US",
        "display": "English (United States)"
      } ],
      "text": "English (United States)"
    }
  } ]
}
``` 
:::

::: {.callout-note collapse="true"}
## A sample Observation resource

```json
{
  "resourceType": "Observation",
  "id": "f83286e0-5797-e51d-a7e6-6708d8085623",
  "status": "final",
  "category": [ {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/observation-category",
      "code": "laboratory",
      "display": "Laboratory"
    } ]
  } ],
  "code": {
    "coding": [ {
      "system": "http://loinc.org",
      "code": "4548-4",
      "display": "Hemoglobin A1c/Hemoglobin.total in Blood"
    } ],
    "text": "Hemoglobin A1c/Hemoglobin.total in Blood"
  },
  "subject": {
    "reference": "urn:uuid:3daf29a9-f7b1-9d9f-45ba-4be258308a75"
  },
  "encounter": {
    "reference": "urn:uuid:91fe93c0-52ae-98bc-e14c-29df89c8119d"
  },
  "effectiveDateTime": "2013-10-05T08:13:20-04:00",
  "issued": "2013-10-05T08:13:20.014-04:00",
  "valueQuantity": {
    "value": 6.38,
    "unit": "%",
    "system": "http://unitsofmeasure.org",
    "code": "%"
  }
}
```

:::

You can review these Bundles in your text editor of choice, or the Synthea team has made an online tool for quickly reviewing the content of a Synthea-generated Bundle. Simply visit [https://synthetichealth.github.io/spt/#/record_viewer](https://synthetichealth.github.io/spt/#/record_viewer) and drag & drop a patient file onto the page to load it.


## Common Configuration
Synthea includes a variety of command-line arguments and configuration options to enable or disable common settings, or change certain aspects of the output data. A small subset of the common options are listed below; more complete documentation is available on the Synthea wiki.

#### Command line arguments
```
java -jar synthea-with-dependencies.jar [options] [state [city]]
[-p populationSize] (number of living patients to produce)
[-a minAge-MaxAge] (age range of patients to export)
[-g gender]
[-s seed] (for randomness / reproducibility -- runs with the same seed should produce the same results)
[-h] (print usage)
[--config=option ...] (any configuration option, see below)

Examples:
java -jar synthea-with-dependencies.jar Massachusetts
java -jar synthea-with-dependencies.jar Alaska Juneau
java -jar synthea-with-dependencies.jar -s 12345
java -jar synthea-with-dependencies.jar -p 1000
java -jar synthea-with-dependencies.jar -s 987 Washington Seattle
java -jar synthea-with-dependencies.jar -s 21 -p 100 Utah "Salt Lake City"
java -jar synthea-with-dependencies.jar -g M -a 60-65
java -jar synthea-with-dependencies.jar -p 10 --exporter.fhir.export=true
java -jar synthea-with-dependencies.jar --exporter.baseDirectory="./output_tx/" Texas
```

#### Configuration Options
Many features can be configured using a properties file. The properties file syntax is one setting per line, with format `key = value`. Some of the most commonly modified settings are shown below.

<!--# This is not actually ruby, but there's no syntax highlighter for properties files and this seems to be the closest -->
```ruby
# Set the folder where exported records will be created.
# Each export type (e.g., FHIR, CCDA, CSV) will be a subfolder under this:
exporter.baseDirectory = ./output/

# Set to true to enable the FHIR R4 exporter:
exporter.fhir.export = true

# Set the number of years of active history to keep from each patient. Default: 10
# Set to 0 to keep all history from every patient, note this will increase file size significantly.
exporter.years_of_history = 10

# Set this to only include selected resource types: (e.g. Patient,Condition,Encounter)
exporter.fhir.included_resources =
# Set this to exclude certain resource types from export: (e.g. Observation)
exporter.fhir.excluded_resources =

# Set to false to enable adding numbers to synthetic patient names, to make it more obvious they are not real data.
generate.append_numbers_to_person_names = true
```


Synthea includes a default configuration file (which developers can find at `./src/main/resources/synthea.properties`). Each default setting can be individually overridden using a local settings file that is passed to Synthea when it is run with the `-c` flag:
```sh
java -jar synthea-with-dependencies.jar -c path/to/settings/file
```
Alternatively, individual configuration settings may be modified by a command-line flag. Any command-line argument starting with `--` will set the value of a configuration setting, for example:

```sh
java -jar synthea-with-dependencies.jar --generate.append_numbers_to_person_names=false
```
(note that when using this approach there should be no spaces between the setting name, equals sign, and setting value)

Additional information on configuration options can be found [on the Synthea wiki](https://github.com/synthetichealth/synthea/wiki/Common-Configuration).

---

You should now feel comfortable with the basics - what Synthea is and how to run it to generate synthetic health records. The next section will describe some options for customizing the patients that Synthea produces.
