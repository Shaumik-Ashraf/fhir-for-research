---
title: "Key FHIR Resources"

bibliography: ../bibliography.bib
format:
  html:
    template-partials:
      - title-block.html

tbl-colwidths: [26,74]

area:
  name: Overview
topic:
  name: FHIR for Research

roles:
  - Informaticist
  - Software Engineer
  - Clinician Scientist/Trainee

learning_objectives:
  - question: What are some key FHIR resources?
    answer: Patient, Observation, and Bundle. 
  - question: How are FHIR resources structured?
    answer: FHIR resources are defined in a structure table that lists out each attribute's name, flags, cardinality, type, constraints, and descriptions. 
  - question: How do FHIR resources allow for interoperability?
    answer: FHIR attributes can be rigorously defined as basic types, complex types, choice types, or inherited types that allow for meaningful transfer of medical information without loss of semantics. Extensions can capture any other data and resource metadata aids with resource understanding.
---

```{=html}
<!--# DISCUSS

Overall comments:
- watch the technical complexity of the language you use. Sometimes it reads like it's written for software developers. Many of the readers will not be that technical.
- many sentences are overly complex. Take a critical look to see what words and phrases aren't necessary, and where sentences can be reorganized to be more direct. Start with adverbs and sentences with multiple commas.

--LDC
-->
```
::: callout-note
## Looking for a brief table of key FHIR resources?

Jump to [the table of key resources](#table-of-key-resources). This rest of this module does a walkthrough of the `Patient` resource and a [example patient with high blood-glucose levels](#hyperglycemic-patient-example).
:::

## Overview of Core Elements

<!--# DISCUSS needs more definition of what a resource is or a link to an existing module that defines it simply --LDC  -->

<!--# Rewritten to be more direct. --SA -->

The fundamental building blocks of FHIR are resources. A **FHIR resource** is a rigorously defined structure for encapsulating and transferring medical information while maintaining unambiguous, shared meaning.[^1]

[^1]: In other words, supporting "semantic interoperability."

Resources are a key part of FHIR's solution to healthcare intoperability. The FHIR core v4.3.0 (also known as Revision 4B, or R4B) defines [140 resources](https://hl7.org/fhir/R4B/resourcelist.html) that allow for healthcare interoperability. The [HL7 FHIR website](https://hl7.org/fhir) gives a well structured summary of the FHIR core:

[![The levels of FHIR core. From \[HL7's FHIR specification\](https://hl7.org/fhir/R4B/resourcelist.html).](images/fhir-index.png){fig-alt="Level 1: basic framework on which the specification is built. Level 2: Supporting implementation and binding to external specifications. Level 3: Linking to real world concepts in the healthcare system. Level 4: Record-keeping and and Data Exchange for the healthcare process. Level 5: Providing the ability to reason about the healthcare process."}](https://hl7.org/fhir)

As shown above the FHIR Core is tiered into 5 levels. Levels 1 and 2 define data types and infrastructure required to implement FHIR, including "meta" FHIR resources used to describe aspects of FHIR itself. Levels 3 and 4 define intuitive FHIR resources information such as `Patient` or `Observation`. Level 5 represents more abstract FHIR resources such as clinical workflows with the intended use of [Clinical Decision Support](https://www.healthit.gov/topic/safety/clinical-decision-support).

A resource may be encoded in different standard formats like [JSON, XML, or RDF](https://hl7.org/fhir/formats.html#wire) -- these are used throughout the software industry, not just in the health space. This allows for processing of FHIR resources by common programming languages and software tools.[^2] The critical concepts across the FHIR resource design are:

[^2]: In contrast, HL7 V2 messages use their own proprietary encoding format, which cannot be parsed without a purpose-built library or custom code.

-   **granularity** to capture all possible information
-   **flexibility** to work with a variety of pre-existing data pipelines
-   **extensibility** to encompass quirks in real-world workflows
-   **metadata** for auto-discovery and self-documentation

FHIR resources are rigorously defined to support all of the concepts above, and fully follow [object oriented principles](https://hl7.org/fhir/R4B/resourcelist.html) (a key software engineering concept). They bridge the world between technical implementation and real-world medical practice while minimizing compromises. To understand how FHIR accomplishes this, lets examine the [Patient](https://hl7.org/fhir/patient.html) resource.

## A dive into FHIR resource structure: a Patient resource walkthrough

Here is a [FHIR structure table](https://hl7.org/fhir/formats.html#table) for [Patient](https://hl7.org/fhir/patient.html#resource):

[![The structure for FHIR patient resource.](images/fhir-r4b-patient-structure.png){.column-page-inset}](https://hl7.org/fhir/R4B/patient.html#resource)

All FHIR resources have a similar table representing their contents. These tables have the following columns:

-   **Name:** The attribute name.
-   **Flags:** Special markers that carry information required for implementers. The flags **`N`**, `?!`, and `Î£` represent [normative](https://www.hl7.org/fhir/R4B/versions.html#std-process), [is-modifier](https://www.hl7.org/fhir/R4B/conformance-rules.html#isModifier), and [in-summary](https://www.hl7.org/fhir/R4B/search.html#summary) respectively. We will not cover FHIR attribute flags in detail here, but [HL7 has them all documented](https://www.hl7.org/fhir/formats.html#table).
-   **Card.:** The carnality of the attribute in format `{minimum}..{maximum}`. Cardinality refers to the number of data points an element can hold. The most intuitive cardinality values are `1..1` which means "one value required" and `0..1`, which means "one value is optional. However, other options are possible, like `0..*`, which means"any number of values."[^3]
-   **Type:** The primitive or complex [data type](https://hl7.org/fhir/datatypes.html). A primitive type is something like `date` or `integer64`. A complex data type is another FHIR resource (like [Address](https://hl7.org/fhir/R4B/datatypes.html#Address)).
-   **Description & Constraints:** A human-targeted explanation of the attribute, but may also contain key constraints that must be enforced by implementers. Constraints (like "element X must be populated if element Y is missing") may be formally defined through a language called [FHIRPath](https://hl7.org/fhir/fhirpath.html).

[^3]: A cardinality of `0..*` might be appropriate for a "middle name" element, where a person might have no middle name, one middle name, or multiple middle names. The flexibility afforded by cardinality allows for all these possibilities to be represented in a consistent fashion by the same FHIR data element .

Once you gain familiarity with FHIR, reading a structure table will tell you all you need to use a resource. FHIR is designed so that defining a resource automatically generates a structure table, so there will always be documentation in this specific format available for any resource.

### Basic types example: `Patient.active`

Under `Patient` we see the attribute "active" which is referred to as `Patient.active`. From the table we know that `Patient.active` is a boolean (i.e., "true" or "false") and can either be omitted or have one value (cardinality `0..1`). Keeping this attribute optional makes the FHIR resource very flexible: a system implementing the Patient resource **must** be able to accommodate this attribute, but **cannot** require it. An example of this attribute in JSON format would look like:

``` json
{
  ...
  "active": "true",
  ...
}
```

As mentioned above, FHIR defines [19 basic types](https://www.hl7.org/fhir/datatypes.html#primitive) that should be familiar to those with an informatics or data science background.

### Complex types example: `Patient.name`

`Patient.name` is of complex type [HumanName](https://hl7.org/fhir/datatypes.html#HumanName). Complex types are defined by their own FHIR resource, and have their own structure table accordingly. Here's the one for HumanName:

[![The structure for Patient.name, which is a HumanName](images/fhir-human-name-structure.png)](https://hl7.org/fhir/datatypes.html#HumanName)

HumanName's elements all have basic types, such as `HumanName.given`, an array of zero or more strings, and `HumanName.use`, a code-string that is must be one of the provided values. As an example, the name Pieter van de Heuvel would be represented in JSON as:

``` json
{
  "name": [                        # <1>
    {                              # <2>
      "use": "usual",
      "family": "van de Heuvel",
      "given": [
        "Pieter"
      ],
      "suffix": [
        "MSc"
      ]
    }
  ]
}
```

1.  This indicates the following lines are the value of the `Patient.name` element
2.  This begins the HumanName value of `Patient.Name`

::: {.callout-note collapse="true"}
## The Granularity of FHIR

Just at a glance of `HumanName` it is clear how meticulous and granular FHIR is. `HumanName` allocates seven attributes for a "name" where a traditional database may only allocate one or two fields. Simultaneously, every attribute is optional, leading to great flexibility. One may argue that this makes FHIR too ambiguous for any practical use, but in the real world context-based [implementation guides (IGs)](/modules/30-fhir-data-modeling--real-world-ig/) and [resource profiles](https://hl7.org/fhir/profiling.html) will further add constraints to a resource to make it more applicable.
:::

### Choice element example: `Patient.deceased[x]`

Elements with a [choice of datatypes](https://hl7.org/fhir/formats.html#choice) allow a given element to have more than one type. Known as "choice elements," these elements have some particular characteristics described below with `Patient.deceased[x]` as an example:

-   `Patient.deceased[x]` appears in documentation only -- never in an instance of Patient that's been populated with data.

-   Instead, one *and only one* of the following may appear in an instance of Patient: `Patient.deceasedBoolean` or `Patient.deceasedDateTime`. These two valid types for `Patient.deceased[x]` are indicated in the documentation of the Patient resource.

-   All choice elements *must* have a maximum cardinality of `1` [per the FHIR specification](https://hl7.org/fhir/formats.html#choice).

-   `Patient.deceased[x]` happens to have a minimum cardinality of `0`, so an instance of Patient may also omit both `Patient.deceasedBoolean` and `Patient.deceasedDateTime`. Other elements with a choice of datatype may have a minimum cardinality of `1` to require a value of one of the indicated datatypes.

This flexibility allows the status of non-deceased patients to be represented by `Patient.deceasedBoolean = false`, while deceased patients can be represented by `Patient.deceasedBoolean = true` or `Patient.deceasedDateTime = "2023-01-01T01:01:01"`.

Choice elements are always denoted by a `[x]` suffix in documentation. In instances, the `[x]` is always replacec with the name of the datatype in [CamelCase](https://en.wikipedia.org/wiki/Camel_case): `deceased[x]` becomes `deceasedDateTime` for the [dateTime type](https://www.hl7.org/fhir/datatypes.html#dateTime).

While the flexibility afforded by this feature of the FHIR specification can be useful, it certainly adds complexity for implementers including researchers. When working with instances of resources that have choice of datatype elements, consider the following:

-   Assume that any of the possible types may be present for a given element. This means that building a tabular representation of Patient instances would initially include two columns related to "deceased": `deceased_boolean` and `deceased_datetime`. An analyst would need to add logic to collapse this down to a single column if necessary for a given analysis (e.g., logic like "if `deceased_datetime` is not empty and `deceased_boolean` is missing, then set `deceased_boolean` to `true`").

-   When possible, use existing software libraries to do the FHIR-to-tabular conversion, such as R's [fhircrackr](https://cran.r-project.org/web/packages/fhircrackr/vignettes/fhircrackr_intro.html), which may simplify handling these elements.

-   When developing custom software, use FHIR's official [list of choice elements](https://hl7.org/fhir/choice-elements.json) to systematically handle them rather than hard-coding special cases resource-by-resource for choice elements.

-   If possible, use [FHIR Profiles](https://www.hl7.org/fhir/profiling.html) to add constraints to disallow undesirable datatypes for choice elements. For example, if `Patient.deceasedDateTime` is *never* useful for a given use case, a profile of Patient could entirely disallow `Patient.deceasedDateTime` and make `Patient.deceasedBoolean` required. This is akin to defining a data dictionary ahead of data collection, and this approach can drastically simplify downstream analysis *if the custom profiles are implemented by data sources*.[^4]

[^4]: As you may suspect, implementation of custom profiles is potentially nontrivial, especially if the data source is an EHR. However, in cases like large multi-site studies, the implementation effort may be worth it. Note that the standardized approach to representing constraints via FHIR Profiles may make custom implementation simpler compared to implementation based off e.g., a one-off data dictionary in Excel. FHIR also provides tools to automatically verify if data conforms to specific FHIR profiles, which can be used to support quality assurance.

### CodeableConcepts example: `Patient.maritalStatus`

`Patient.maritalStatus` is a [CodeableConcept](http://hl7.org/fhir/datatypes.html#CodeableConcept), which is a commonly used complex type in FHIR. CodeableConcepts bind an attribute to a specific set of terminology concepts. `Patient.maritalStatus` is bound to the [Marital Status Codes Value Set](http://hl7.org/fhir/valueset-marital-status.html). For more on FHIR's terminology resources, see the [terminology module](terminology.qmd).

In addition to identifying a value set for the binding, a CodeableConcept also identifies the [strength of the binding](https://www.hl7.org/fhir/terminologies.html#strength):

`required` binding

:   The value of the element **must** be from the specified value set.

`extensible` binding

:   If any of the codes in the specified value set can represent the concept being communicated, then a code from the specified value set **must** be used. If the value set doesn't include a code that represents the concept, then a code that's not in the specified value set can be used.

`preferred` binding

:   "Instances are encouraged to draw from the specified codes for interoperability purposes but are not required to do so"

`example` binding

:   The specified value set is merely an example, and codes from outside the specified value set can be used freely.

The base FHIR specification generally does not have `required` bindings as these severely limit the flexibility of resources. Instead, required bindings are added for specific use cases via [FHIR Profiles](https://www.hl7.org/fhir/profiling.html).

Researchers should consider the following:

-   Like with choice elements, using a FHIR Profile to require use of specific value sets for a given research use case can simplify downstream analysis substantially.

-   Unless an element has a `required` binding, do not assume that FHIR data will only include codes from a specific value set. For example, the `Patient.maritalStatus` binding is `extensible`: while you *may* see data with values from [the bound value set](https://www.hl7.org/fhir/valueset-marital-status.html) (like `M` for married), you could also see something like the the SNOMED CT concept [`87915002` ("Married (finding)")](https://browser.ihtsdotools.org/?perspective=full&conceptId1=87915002&edition=MAIN/2023-02-28&release=&languages=en) to represent "married." Careful exploratory analysis of data is therefore required in the presence of any binding strength other than `required`.

### Inheritance in FHIR

In software engineering, [inheritance](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)) is a common pattern for sharing attributes across similar classes (e.g., "dog" and "cat" might inherit a property called "cuteness" from a shared "pet" class).

FHIR has a similar pattern, where resources like Patient inherit structure from a parent type called [DomainResource](http://hl7.org/fhir/domainresource.html). This can be seen in the first row of the structure table for Patient:

![The first few rows of the structure table of the Patient resource, with an arrow indicating that Patient is a DomainResource.](images/fhir-r4b-patient-domainresource.png){.column-page-inset alt="The structure for FHIR patient resource."}

Similarly, DomainResource is a child of [Resource](http://hl7.org/fhir/resource.html), which is the base of almost all FHIR resources. Because all base FHIR resources are children of DomainResource, you can expect all of them to have the same set of elements in their computable representation. This is useful if you are writing software that needs to read in resource definitions from the FHIR specification.

FHIR follows a similar pattern with Profiles, where a Profile inherits the constraints from another Profile or from a base FHIR resource.

### A Patient Example

To summarize everything about the Patient resource into practice, here is an [anonymized example](https://hl7.org/fhir/patient-example-f001-pieter.json.html) from the real world in JSON format:

``` json
{
  "resourceType": "Patient",
  "id": "f001",
  "text": {
    "status": "generated",
    "div": "..."
  },
  "identifier": [
    {
      "use": "usual",
      "system": "urn:oid:2.16.840.1.113883.2.4.6.3",
      "value": "738472983"
    },
    {
      "use": "usual",
      "system": "urn:oid:2.16.840.1.113883.2.4.6.3"
    }
  ],
  "active": true,
  "name": [
    {
      "use": "usual",
      "family": "van de Heuvel",
      "given": [
        "Pieter"
      ],
      "suffix": [
        "MSc"
      ]
    }
  ],
  "telecom": [
    {
      "system": "phone",
      "value": "0648352638",
      "use": "mobile"
    },
    {
      "system": "email",
      "value": "p.heuvel@gmail.com",
      "use": "home"
    }
  ],
  "gender": "male",
  "birthDate": "1944-11-17",
  "deceasedBoolean": false,
  "address": [
    {
      "use": "home",
      "line": [
        "Van Egmondkade 23"
      ],
      "city": "Amsterdam",
      "postalCode": "1024 RJ",
      "country": "NLD"
    }
  ],
  "maritalStatus": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
        "code": "M",
        "display": "Married"
      }
    ],
    "text": "Getrouwd"
  },
  "multipleBirthBoolean": true,
  "contact": [
    {
      "relationship": [
        {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/v2-0131",
              "code": "C"
            }
          ]
        }
      ],
      "name": {
        "use": "usual",
        "family": "Abels",
        "given": [
          "Sarah"
        ]
      },
      "telecom": [
        {
          "system": "phone",
          "value": "0690383372",
          "use": "mobile"
        }
      ]
    }
  ],
  "communication": [
    {
      "language": {
        "coding": [
          {
            "system": "urn:ietf:bcp:47",
            "code": "nl",
            "display": "Dutch"
          }
        ],
        "text": "Nederlands"
      },
      "preferred": true
    }
  ],
  "managingOrganization": {
    "reference": "Organization/f001",
    "display": "Burgers University Medical Centre"
  }
}
```

Note that all JSON resources will begin with `resourceType: "<resource>"` to indicate it is an instance of a specific base FHIR resource.

Instances of FHIR resources may also be represented in other formats besides JSON, like [XML](https://en.wikipedia.org/wiki/XML). In XML, the resource type is identified by the tag enclosing the data (in [this case](https://hl7.org/fhir/patient-example-f001-pieter.xml.html), `<Patient ...> ... </Patient>`).

Typically, JSON is easier to read (both for humans and computers) than XML, so JSON is used primarily in FHIR for Research.

Researchers should be aware of the following related to formats of FHIR data:

-   Regardless of JSON or XML format, the underlying data are the same, and it is possible to convert losslessly between JSON and XML representations of FHIR data.

-   You should default to using JSON whenever you are writing code to read in FHIR instances (or computable representations of FHIR Profiles or resource definitions).

-   When requesting FHIR data from a server, you can [specify](https://www.hl7.org/fhir/http.html#parameters) the format of the response.

-   If you are an R user, the [fhircrackr](https://github.com/polar-fhir/fhircrackr) library automatically uses the XML representation of FHIR resource instances. If you use this library, you will need to have some basic familiarity with XML to [extract data elements from the FHIR resource instances](https://github.com/polar-fhir/fhircrackr#flattening-resources).

## The Observation resource

[Observation](https://hl7.org/fhir/observation.html) is another commonly used FHIR resource. It can capture vital signs, laboratory data, imaging results, clinical findings, device measurements, and much more. Just like the Patient resource, there is an [Observation structure table](http://hl7.org/fhir/observation.html#resource):

[![The structure for FHIR observation resource.](images/fhir-observation-structure.png){.column-page-inset fig-alt="Observation structure with attributes status:code, code:CodeableConcept, subject:Reference(Patient), and value[x]."}](https://hl7.org/fhir/observation.html#resource)

Below is a JSON example `Observation` of high blood glucose levels:

``` json
{
  "resourceType": "Observation",
  "id": "f001",
  "text": {
    "status": "generated",
    "div": "..."
  },
  "identifier": [
    {
      "use": "official",
      "system": "http://www.bmc.nl/zorgportal/identifiers/observations",
      "value": "6323"
    }
  ],
  "status": "final",
  "code": {
    "coding": [
      {
        "system": "http://loinc.org",
        "code": "15074-8",
        "display": "Glucose [Moles/volume] in Blood"
      }
    ]
  },
  "subject": {
    "reference": "Patient/f001",
    "display": "P. van de Heuvel"
  },
  "effectivePeriod": {
    "start": "2013-04-02T09:30:10+01:00"
  },
  "issued": "2013-04-03T15:30:10+01:00",
  "performer": [
    {
      "reference": "Practitioner/f005",
      "display": "A. Langeveld"
    }
  ],
  "valueQuantity": {
    "value": 6.3,
    "unit": "mmol/l",
    "system": "http://unitsofmeasure.org",
    "code": "mmol/L"
  },
  "interpretation": [
    {
      "coding": [
        {
          "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
          "code": "H",
          "display": "High"
        }
      ]
    }
  ],
  "referenceRange": [
    {
      "low": {
        "value": 3.1,
        "unit": "mmol/l",
        "system": "http://unitsofmeasure.org",
        "code": "mmol/L"
      },
      "high": {
        "value": 6.2,
        "unit": "mmol/l",
        "system": "http://unitsofmeasure.org",
        "code": "mmol/L"
      }
    }
  ]
}
```

Since the JSON object specifies `resourceType: "Observation"` and using the structure table above, you can interpret the JSON content as follows:

-   **`Observation.id = f001`**: the resource id is `f001`. See [accessing FHIR data](/modules/10-intro--accessing-fhir-data/) for how to use it.
-   **`Observation.text`**: human-targeted text in HTML that an EHR will display if FHIR software fails.
-   **`Observation.status = final`**: a *required* [code](http://hl7.org/fhir/datatypes.html#primitive) string. This indicates the observation is finalized.
-   **`Observation.code`**: a *required* `CodeableConcept`, using [LOINC](http://hl7.org/fhir/valueset-observation-codes.html) for the example binding.
-   **`Observation.subject`**: a [Reference](http://hl7.org/fhir/references.html#Reference) to another FHIR resource. In this case it is the example Patient from earlier.
-   **`Observation.valueQuantity`**: a supplied `value[x]` choice element for storing the result of the test. In this case they use type [Quantity](http://hl7.org/fhir/datatypes.html#Quantity) to specify blood glucose concentration.

## The Bundle resource

It may be beneficial for may use cases to group multiple FHIR instances together in one package, like grouping the blood-glucose Observation example above with the referenced Patient. The [Bundle](https://hl7.org/fhir/bundle.html) resource is often used for this in FHIR.

In an instance of Bundle, each grouped instance is stored inside **`Bundle.entry[i].resource`**. Examples of instances of Bundle [can be found here](https://hl7.org/fhir/diagnosticreport-examples.html).

::: {.callout-caution collapse="true"}
## Bundle vs NDJson

You may discover certain FHIR communities using **NDJson**, or Newline-Delimited JSON in lieu of `Bundle`. In NDJSon each FHIR resource is printed on one line, and a new line will indicate the next FHIR resource. NDJson is more efficient than `Bundle` when it comes to very large amounts of data transfer, but as of March 1st 2023 [FHIR R5 puts using NDJson in Draft status](http://hl7.org/fhir/5.0.0-draft-final/nd-json.html) so FHIR data in NDJson will likely be relatively rare for the next several years as implementers catch up. `Bundle` is used far more frequently, and sometimes with [pagination](https://www.hl7.org/fhir/search.html#count) for large amounts of data.
:::

## The CapabilityStatement resource

A [CapabilityStatement](https://hl7.org/fhir/capabilitystatement.html) is a resource that contains metadata about a FHIR server, including what other resources the server hosts and how to access them.

CapabilityStatement provide information like:

-   **`CapabilityStatement.url`:** the base URI for the FHIR server. Technically this could also be the URI to the capability statement itself, which would include the base URI for the server.
-   **`CapabilityStatement.fhirVersion`:** the FHIR version to which the API conforms to. In this case the server is running FHIR 4.3.0 (also known as FHIR R4B) **at that base url**. It is possible for a FHIR server to service multiple FHIR versions, but then each FHIR API will be serviced at a different base url, for example FHIR R4 at <https://fhir.example.com/R4/> and FHIR R4B at <https://fhir.example.com/R4B/>.
-   **`CapabilityStatement.format`:** the [encoding formats](https://hl7.org/fhir/formats.html#wire) supported by the FHIR server. [FHIR queries](/modules/10-intro--accessing-fhir-data/) must specify one of these formats via the [HTTP `Accept` Header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept).
-   **`CapabilityStatement.implementationGuide`:** the [implementation guides (IG)](/modules/30-fhir-data-modeling--real-world-ig/) that the FHIR server conforms to. However, it is technically possible for a server to be partially or even fully compliant to an IG without listing it in the metadata.
-   **`CapabilityStatement.rest[i].security.service`:** the [RESTful security services](http://hl7.org/fhir/valueset-restful-security-service.html#expansion) required to access data on this server as a `CodeableConcept`. This example uses [SMART-on-FHIR](/modules/20-intro-smart-on-fhir--overview/), but other possiblities include [OAuth](https://oauth.net/) or [UDAP](https://www.udap.org/).
-   **`CapabilityStatement.rest[i].resource.type`:** all FHIR resources supported by the server. Note this does not include foundational resources such as `CapabilityStatement` or `Bundle`, but typically resources [level 3 and higher](https://hl7.org/fhir).
-   **`CapabilityStatement.rest[i].resource.interaction`:** the [RESTful interactions](http://hl7.org/fhir/http.html) available for that resource by the server. The [`search`](http://hl7.org/fhir/http.html#search) interaction is one such RESTful API action available in FHIR, and the `CapabilityStatement.rest[i].resource.searchParam` field further specifies what search parameters are possible.

Properly implemented FHIR servers are required to provide an instance of CapabilityStatement at the `/metadata` endpoint.[^5] This provides a way for software to discover key information about the available features of a given FHIR server. Note that the real-world capabilities of a FHIR server may not entirely match its stated capabilities, so software that access FHIR servers should be written to be resilient to deviations from the published CapabilityStatements.

[^5]: <http://hapi.fhir.org/baseR4/metadata> is a real-world example of a CapabilityStatement instance.

## Other common FHIR resources:

[Patient](https://hl7.org/fhir/patient.html)

:   A subject of medical care or other health-related activity. May be an individual human or animal.

[Observation](https://hl7.org/fhir/observation.html)

:   Assertions about a patient, device, lab report, or other subject. There is some use-case overlap with `Condition` or `DiagnosticReport`, for which an [IG](/modules/30-fhir-data-modeling--real-world-ig/) will provide better guidance. In general `Observations` are for very simple and specific statements.

[Bundle](https://hl7.org/fhir/bundle.html)

:   A FHIR resource for combining clinically relevant FHIR resources together into one. May contain anywhere from zero to thousands of FHIR resources.

[Condition](https://hl7.org/fhir/condition.html)

:   A problem, diagnosis, or clinical event. It is expected to be the reason for a medical intervention and tie into a larger [clinical workflow](http://hl7.org/fhir/workflow.html). There is some use-case overlap with `Observation`, for which an [IG](/modules/30-fhir-data-modeling--real-world-ig/) will provide better guidance.

[Procedure](https://hl7.org/fhir/procedure.html)

:   A medical activity preformed on a patient, such as surgery, diagnostic procedures, or therapy. It is expected to be a part of a clinical workflow.

[Practitioner](https://hl7.org/fhir/practitioner.html)

:   Any individual providing healthcare or a related service, from physicians to receptionists to service animals.

[Organization](https://hl7.org/fhir/organization.html)

:   Any formal or informal group of entities acting towards a collective cause, such as hospitals, departments, corporations, or health insurance groups.

[Composition](https://hl7.org/fhir/composition.html)

:   A set of FHIR resources that create a single coherent clinical statement, and usually acts as the skeleton for a [document](http://hl7.org/fhir/documents.html). This is typically used in conjunction with a `Bundle`.

[Extension](https://hl7.org/fhir/extension.html)

:   A FHIR resource composed of a definitive URL and a `Extension.value[x]` of any type. Almost all resources inherit this from `DomainResource.extension` and an IG should provide a specification for how it is used.

[CapabilityStatement](https://hl7.org/fhir/capabilitystatement.html)

:   A FHIR resource that contains all the metadata required to interface with a FHIR service.

[StructureDefinition](https://hl7.org/fhir/structuredefinition.html)

:   A FHIR resource that defines other FHIR resources. An instance exists for all FHIR resources, which allows for powerful dynamic programming and automated documentation.

[OperationDefinition](https://hl7.org/fhir/operationdefinition.html)

:   A FHIR resource that defines [FHIR operations](http://hl7.org/fhir/operations.html) in addition to traditional REST operations, that conventionally begin with a dollar sign (`$`). For example, `https://fhir.example.com/Patient/$match` will preform a [patient matching operation](http://hl7.org/fhir/patient-operation-match.html). This resource also allows for powerful dynamic programming for FHIR operations.
